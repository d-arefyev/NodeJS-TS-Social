@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* --background: #ffffff;
  --foreground: #171717; */
  --color-accent: #0095F6;
  --color-gray: #DBDBDB;
  --color-light-gray: #FAFAFA;
  --color-dark-gray: #737373;
  --color-dark: #000000;
  --color-light: #FFFFFF;
  --color-link: #00376B;
  
  --container-width: 975px;
  --container-padding-x: 15px;

  --transition-duration: 0.2s;
}

/* @media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
} */

.globalContainer {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
  margin-left: 330px;
}

body,
html {
  font-family: Roboto, sans-serif;
  font-size: 1 rem;
  font-weight: 400;
  line-height: 1.35rem;
  color: var(--color-dark);
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

h1, h2, h3, h4 {
  line-height: 1;
  font-weight: 600;
  color: var(--color-dark);
}

a,
Link,
button,
input,
textarea,
svg * {
  transition: var(--transition-duration);
}

/* Стили для ссылок */
a {
  color: var(--color-links);
  text-decoration: none;
}

a:hover {
  color: var(--color-accent);
}

ul,
ol {
  margin: 0;
  padding: 0;
  list-style: none;
}

button,
select,
a {
  text-decoration: none;
  cursor: pointer;
}


/* Normalise -------------------------------------------------- */
/**
  Нормализация блочной модели
 */
 *,
 *::before,
 *::after {
   box-sizing: border-box;
 }
 
 /**
     Убираем внутренние отступы слева тегам списков,
     у которых есть атрибут class
    */
 :where(ul, ol):where([class]) {
   padding-left: 0;
 }
 
 /**
     Убираем внешние отступы body и двум другим тегам,
     у которых есть атрибут class
    */
 body,
 :where(blockquote, figure):where([class]) {
   margin: 0;
 }
 
 /**
     Убираем внешние отступы вертикали нужным тегам,
     у которых есть атрибут class
    */
 :where(h1,
   h2,
   h3,
   h4,
   h5,
   h6,
   p,
   ul,
   ol,
   dl):where([class]) {
   margin-block: 0;
 }
 
 :where(dd[class]) {
   margin-left: 0;
 }
 
 :where(fieldset[class]) {
   margin-left: 0;
   padding: 0;
   border: none;
 }
 
 /**
     Убираем стандартный маркер маркированному списку,
     у которого есть атрибут class
    */
 :where(ul[class]) {
   list-style: none;
 }
 
 /**
     Обнуляем вертикальные внешние отступы параграфа,
     объявляем локальную переменную для внешнего отступа вниз,
     чтобы избежать взаимодействие с более сложным селектором
    */
 p {
   /* --paragraphMarginBottom: 24px; */
 
   margin-block: 0;
 }
 
 /**
     Внешний отступ вниз для параграфа без атрибута class,
     который расположен не последним среди своих соседних элементов
    */
 p:where(:not([class]):not(:last-child)) {
   margin-bottom: var(--paragraphMarginBottom);
 }
 
 
 /**
     Упрощаем работу с изображениями
    */
 img {
   display: block;
   max-width: 100%;
 }
 
 /**
     Наследуем свойства шрифт для полей ввода
    */
 input,
 textarea,
 select,
 button {
   font: inherit;
 }
 
 html {
   /**
       Пригодится в большинстве ситуаций
       (когда, например, нужно будет "прижать" футер к низу сайта)
      */
   height: 100%;
 }
 
 /**
     Плавный скролл
    */
 html,
 :has(:target) {
   scroll-behavior: smooth;
 }
 
 body {
   /**
       Пригодится в большинстве ситуаций
       (когда, например, нужно будет "прижать" футер к низу сайта)
      */
   min-height: 100%;
   /**
       Унифицированный интерлиньяж
      */
   line-height: 1.5;
 }
 
 /**
     Приводим к единому цвету svg-элементы
    */
 svg *[fill] {
   fill: currentColor
 }
 
 svg *[stroke] {
   stroke: currentColor
 }
 
 /**
     Чиним баг задержки смены цвета при взаимодействии с svg-элементами
    */
 svg * {
   transition-property: fill, stroke;
 }